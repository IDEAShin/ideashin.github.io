<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建个人博客并部署到Vps服务器</title>
    <url>/post/6c0c97eb/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    看到别人都在写blog，拥有自己的小站，实在羡慕不已。虽然自己也在做笔记，但是总感觉自己偷偷放着不那么舒服，不如放在网上和大家一起交流共勉。因此我决心要有自己的blog。最后终于完成了自己第一个的网站，也是自己第一个blog，也是有了自己的第一个域名ideashin.com。</p>
<p>​    建站的过程并不怎么顺利，本来Hexo+GitHub是绝配，但是我本身就有一个限制（开小飞机）的vps，一直放着也是浪费，因此决心用vps部署一个Hexo的博客。因为以前并没有接触过，所以查看了很多资料才完成的。以下就是我建站的过程，遇到的问题我都放在最后面了，如果有幸能被看到的话希望能有所帮助。<a id="more"></a></p>
<p>​    在此写下第一篇博客，也是自己的一个开端，希望对自己有能所提升。也方便自己以后查阅，也希望能有幸帮到他人。</p>
<h1 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>安装hexo需要在本机安装Git以及Node.js</p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul>
<li><p>从官网下载安装好后<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p>
<ul>
<li>使用 git -version’可以查看安装的版本</li>
</ul>
</li>
<li><p>配置用户信息，设置用户名以及邮箱</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"用户名"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"邮箱地址"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否成功</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --list</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>重要</strong> 获取key，后面配置SSH要用到</p>
<p>在Git Bash中执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建公钥</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"邮箱地址"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">然后获取复制公钥备用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul>
<li><p>官网下载安装<a href="https://nodejs.org/" target="_blank" rel="noopener">https://nodejs.org</a></p>
<p>输入node -version查看安装版本</p>
</li>
</ul>
<h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><p>具体可以参照官方文档，有中文版就介绍也很详细，这里只简单配置</p>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参照官方文档，使用下列代码安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>
<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>在你想存放hexo的地方新建一个文件夹，如Hexo，然后在文件夹内右键启动git的git bash，执行如下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 不要用git init，这样会把整个hexo文件都同步到服务器，应该是hexo init</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean &amp;&amp; hexo g &amp;&amp; hexo server</span></span><br></pre></td></tr></table></figure>
<p>执行后可以输入网址本地查看<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a></p>
<h1 id="Server操作"><a href="#Server操作" class="headerlink" title="Server操作"></a>Server操作</h1><h2 id="确保您的系统和apt包"><a href="#确保您的系统和apt包" class="headerlink" title="确保您的系统和apt包"></a>确保您的系统和apt包</h2><p>首先，通过运行以下命令确保您的系统和apt包列表完全更新：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get update -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get upgrade -y</span></span><br></pre></td></tr></table></figure>
<h2 id="安装git、sudo、nginx"><a href="#安装git、sudo、nginx" class="headerlink" title="安装git、sudo、nginx"></a>安装git、sudo、nginx</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt install git</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">debian默认无sodu</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install sudo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install nginx</span></span><br></pre></td></tr></table></figure>
<p>检查版本确保安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git --version</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx -V</span></span><br></pre></td></tr></table></figure>
<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/nginx/sites-available</span></span><br><span class="line"><span class="meta">#</span><span class="bash">备份默认配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp default default.bak </span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim default</span></span><br></pre></td></tr></table></figure>
<p>   <img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1554297275022.png" alt></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检查是否有错误</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx -t </span></span><br><span class="line"><span class="meta">#</span><span class="bash">保存退出后，启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx：systemctl start nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置开机自动启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看运行状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示running表示成功运行</span></span><br></pre></td></tr></table></figure>
<h2 id="创建git用户"><a href="#创建git用户" class="headerlink" title="创建git用户"></a>创建git用户</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adduser git</span></span><br></pre></td></tr></table></figure>
<h3 id="赋予sudo权限"><a href="#赋予sudo权限" class="headerlink" title="赋予sudo权限"></a>赋予sudo权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod 740 /etc/sudoers</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/sudoers</span></span><br></pre></td></tr></table></figure>
<p>然后修改在root下面添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git ALL=(ALL) ALL</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1554293490911.png" alt></p>
<p>改回权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod 400 /etc/sudoers</span></span><br></pre></td></tr></table></figure>
<h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><h3 id="切换git用户，并到git用户目录"><a href="#切换git用户，并到git用户目录" class="headerlink" title="切换git用户，并到git用户目录"></a>切换git用户，并到git用户目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换到git用户</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> su git</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">转到git用户目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/git</span></span><br></pre></td></tr></table></figure>
<h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建.ssh文件夹</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir ~/.ssh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">输入可查看是否创建</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建authorized_keys文件并编辑</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim ~/.ssh/authorized_keys</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果你还没有生成公钥，那么首先在本地电脑中执行 cat ~/.ssh/id_rsa.pub | pbcopy生成公钥</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再将公钥复制粘贴到authorized_keys</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存关闭authorized_keys后，修改相应权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 600 ~/.ssh/authorized_keys</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 700 ~/.ssh</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>然后输入测试是否可以登录（免密？）</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ ssh -v <span class="symbol">git@</span><span class="number">68.168</span><span class="number">.141</span><span class="number">.184</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>默认22端口，不是则需要在后面加上<code>-p 端口号</code></p>
</li>
<li><p>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!是以前配置过主机，需要进行删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.ssh/known_hosts</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="创建git裸库"><a href="#创建git裸库" class="headerlink" title="创建git裸库"></a>创建git裸库</h2><ul>
<li>创建裸库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 回到git目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用git用户创建git裸仓库，以blog.git为例</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init --bare blog.git</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>根据前面配置的nginx中的根目录</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1554301495222.png" alt></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /var/www/   </span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建网站目录，以blog为例</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir blog</span></span><br></pre></td></tr></table></figure>
<h2 id="检查用户权限"><a href="#检查用户权限" class="headerlink" title="检查用户权限"></a>检查用户权限</h2><p>检查一下之前的blog.git、.ssh、blog目录的用户组权限是否都为git:git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -l /var/www/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -l /homw/git/</span></span><br></pre></td></tr></table></figure>
<p>如果不是则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chown git:git -R /var/www/blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown git:git -R /home/git/blog.git</span></span><br></pre></td></tr></table></figure>
<h2 id="使用git-hooks同步网站根目录"><a href="#使用git-hooks同步网站根目录" class="headerlink" title="使用git-hooks同步网站根目录"></a>使用git-hooks同步网站根目录</h2><p>使用一个钩子文件：<code>post-receive</code>，每当git仓库接收到内容的时候，就会自动调用这个钩子，把内容同步到网站根目录。</p>
<p><strong>git用户下执行</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换到hooks目录下</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/git/blog.git/hooks</span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim post-receive</span></span><br></pre></td></tr></table></figure>
<p>添加如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">GIT_REPO=/home/git/blog.git</span><br><span class="line">TMP_GIT_CLONE=/home/git/tmp/hexo_tmp	#在这个文件夹下随便创建文件，不然出错</span><br><span class="line">PUBLIC_WWW=/var/www/blog				#在这个文件夹下随便创建文件，不然出错</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br></pre></td></tr></table></figure>
<p>保存后，执行以下赋予权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod +x post-receive</span></span><br></pre></td></tr></table></figure>
<h2 id="关闭git用户的shell权限"><a href="#关闭git用户的shell权限" class="headerlink" title="关闭git用户的shell权限"></a>关闭git用户的shell权限</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/paswd</span></span><br></pre></td></tr></table></figure>
<p>将最后一行</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">1000</span><span class="symbol">:</span><span class="number">1000</span><span class="symbol">:</span><span class="symbol">:/home/git</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="comment">#改为</span></span><br><span class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">1000</span><span class="symbol">:</span><span class="number">1000</span><span class="symbol">:</span><span class="symbol">:/home/git</span><span class="symbol">:/usr/bin/git-shell</span></span><br></pre></td></tr></table></figure>
<h1 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h1><h2 id="配置本地Hexo的-config-yml"><a href="#配置本地Hexo的-config-yml" class="headerlink" title="配置本地Hexo的_config.yml"></a>配置本地Hexo的_config.yml</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@你的服务器IP:/home/git/blog.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<h2 id="同步到服务器"><a href="#同步到服务器" class="headerlink" title="同步到服务器"></a>同步到服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">清理、生成、部署</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span></span><br></pre></td></tr></table></figure>
<p>到现在已经全部完成了，可以自己进行一些配置进一步完善</p>
<h1 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h1><h2 id="服务器使用sodu命令时无法使用"><a href="#服务器使用sodu命令时无法使用" class="headerlink" title="服务器使用sodu命令时无法使用"></a>服务器使用sodu命令时无法使用</h2><ul>
<li><p>原因</p>
<ul>
<li>debian默认sodu</li>
</ul>
</li>
<li><p>解决</p>
<p>执行如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install sudo</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="systemctl-command-not-found"><a href="#systemctl-command-not-found" class="headerlink" title="systemctl: command not found"></a>systemctl: command not found</h2><ul>
<li><p>原因</p>
<ul>
<li>系统版本旧就会没有systemctl命令</li>
</ul>
</li>
<li><p>解决</p>
<p>使用service命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo service &#123;servicename&#125; &#123;stop|start|restart&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="fatal-Not-a-git-repository-or-any-of-the-parent-directories-git"><a href="#fatal-Not-a-git-repository-or-any-of-the-parent-directories-git" class="headerlink" title="fatal: Not a git repository (or any of the parent directories): .git"></a>fatal: Not a git repository (or any of the parent directories): .git</h2><ul>
<li>原因<ul>
<li>提示说没有.git这样一个目录</li>
</ul>
</li>
<li>解决<ul>
<li>git init就好了</li>
</ul>
</li>
</ul>
<h2 id="WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED"><a href="#WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED" class="headerlink" title="WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!"></a>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</h2><ul>
<li><p>原因</p>
<ul>
<li>本机git连接过服务器地址，但是服务器重装了，需要进行删除</li>
</ul>
</li>
<li><p>解决</p>
<p>输入以下命令，删除文件中要连接的服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /Users/wangdong/.ssh/known_hosts</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="repository-‘xxxxxxxxx’does-not-exist"><a href="#repository-‘xxxxxxxxx’does-not-exist" class="headerlink" title="repository ‘xxxxxxxxx’does not exist"></a>repository ‘xxxxxxxxx’does not exist</h2><ul>
<li>原因<ul>
<li>如果要删除这个目录下的文件，这个目录下必须有文件，不然删除就是无意义的</li>
</ul>
</li>
<li>解决<ul>
<li>提前在该目录下新建一些文件</li>
</ul>
</li>
</ul>
<h2 id="在clone一些git项目的时候，有些可能时间太久远，下载失败"><a href="#在clone一些git项目的时候，有些可能时间太久远，下载失败" class="headerlink" title="在clone一些git项目的时候，有些可能时间太久远，下载失败"></a>在clone一些git项目的时候，有些可能时间太久远，下载失败</h2><ul>
<li><p>解决</p>
<p>将git clone http:改为git clone git:</p>
</li>
</ul>
]]></content>
      <categories>
        <category>实用技术</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>集合体系结构以及常用方法总结</title>
    <url>/post/e3f9bd95/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文主要是写集合的体系结构，简单说一下所有的集合类都是继承自Collection接口，这里主要介绍List、Set这两个接口，Queen并不是那么了解只是简单介绍。还有Map集合，并没有像其他接口一样继承Collection，Map提供的是<strong>key到value的映射</strong></p>
<p><strong>集合</strong>：故名思意，就是一堆东西放在一起。在Java里将任意数量的<strong>具有共同属性的对象</strong>存放在一个集合工具类。</p>
<ul>
<li>注意集合只能存放对象，存储int类型的数据“1”，也会自动转换为Integer类</li>
<li>Map集合是以<strong>键值对</strong>的形式存在</li>
<li>集合比数组更加灵活，它的数据存储没有限制，对数据的增删十分方便，试用于无法预测存储数据的数量</li>
</ul>
<a id="more"></a>
<h1 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h1><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1554989428619.png" alt></p>
<h3 id="Iterable与Iterator的关系"><a href="#Iterable与Iterator的关系" class="headerlink" title="Iterable与Iterator的关系"></a>Iterable与Iterator的关系</h3><p>说到体系结构，大家能看到，Collection是继承中Iterable而来的，那么这又和Iterator有什么关系呢？</p>
<ul>
<li><p><strong>Iterable属于java.lang包，Ierrator以及Collection属于java.util包</strong></p>
</li>
<li><p>Iterator也就是迭代器接口，它里面提供了迭代器的方法</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1554988772207.png" alt></p>
</li>
<li><p><strong>在Iterable接口中，调用了Iterator类型的的iterator()方法，返回一个T类型的迭代器</strong></p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1554988606489.png" alt="Iterator&lt;T&gt;"></p>
</li>
</ul>
<h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1554989460626.png" alt="Map接口"></p>
<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li><p>List（序列）就是一个元素<strong>有序且可重复</strong>的集合</p>
</li>
<li><p>可以自由的控制元素的增删</p>
</li>
</ul>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">      System.out.println(<span class="string">"===========================增加"</span>);</span><br><span class="line">      <span class="comment">//增加---add(E e)</span></span><br><span class="line">      list.add(<span class="string">"www"</span>);</span><br><span class="line">      list.add(<span class="string">"ideashin"</span>);</span><br><span class="line">      list.add(<span class="string">".com"</span>);</span><br><span class="line">      list.add(<span class="string">"shin' blog"</span>);</span><br><span class="line">      <span class="comment">//输出个数</span></span><br><span class="line">      System.out.println(<span class="string">"size="</span>+list.size());</span><br><span class="line">      <span class="comment">// 遍历输出</span></span><br><span class="line">      <span class="keyword">for</span> (Object test:list) &#123;</span><br><span class="line">          System.out.println(test);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"--------------增加到指定位置"</span>);</span><br><span class="line">      <span class="comment">//add(int index, E element),从0开始存储,也就是add(n-1, element)</span></span><br><span class="line">      list.add(<span class="number">3</span>, <span class="string">"ideashin"</span>);</span><br><span class="line">      <span class="comment">// 遍历输出</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size();i++) &#123;</span><br><span class="line">          System.out.println(list.get(i));</span><br><span class="line">      &#125;<span class="comment">//看到输出结果可以了解到List的集合中的元素是可重复的</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"--------------指定集合增加到集合末尾"</span>);</span><br><span class="line">      <span class="comment">//addAll(Collection&lt;? extends E&gt; c)</span></span><br><span class="line">      List list2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">      list2.add(<span class="string">"java"</span>);</span><br><span class="line">      list2.add(<span class="string">"linux"</span>);</span><br><span class="line">      list.addAll(list2);</span><br><span class="line">      <span class="comment">// 输出</span></span><br><span class="line">      System.out.println(list);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"--------------指定集合增加到集合指定位置"</span>);</span><br><span class="line">      <span class="comment">//addAll(int index, Collection&lt;? extends E&gt; c)</span></span><br><span class="line">      List list3 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">      list3.add(<span class="string">"猪肉"</span>);</span><br><span class="line">      list3.add(<span class="string">"牛肉"</span>);</span><br><span class="line">      list.addAll(<span class="number">3</span>, list3);</span><br><span class="line">      <span class="comment">// 遍历输出</span></span><br><span class="line">      <span class="keyword">for</span> (Object test:list) &#123;</span><br><span class="line">          System.out.println(test);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"===========================删除"</span>);</span><br><span class="line">      <span class="comment">//删除第2个元素,从0开始存储,也就是remove(n-1)</span></span><br><span class="line">      list.remove(<span class="number">1</span>);<span class="comment">//或者 list.remove(".com");</span></span><br><span class="line">      <span class="comment">// 输出</span></span><br><span class="line">      <span class="keyword">for</span> (Object test:list</span><br><span class="line">      ) &#123;</span><br><span class="line">          System.out.println(test);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"--------------删除所有元素"</span>);</span><br><span class="line">     <span class="comment">// list.removeAll(list);</span></span><br><span class="line">      list.clear();</span><br><span class="line">      System.out.println(list);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-基础入门</title>
    <url>/post/be6e8921/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    建立这个博客也已经三天了，写完第一个建站过程之后，一直不知道该如何下手去写。从知乎上查找“博客 怎么写”、去看别人的博客，刚开始到底怎么写呢？其实到现在我也不是特别明白。</p>
<p>​    既然不明白，那就有什么写什么吧！自己正在学习java，建这个博客本意也是为了能提升自己做好笔记。下定决心就开始写了，先把今天学习的Spring基础写出来，以后在慢慢回顾Java以前的知识点。以下的文章，我是跟着慕课网的课程，以及看书查阅，总结而成的。</p>
<h1 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h1><blockquote>
<p><strong>Spring Framework</strong> 是一个开源的<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noopener">Java</a>／<a href="https://zh.wikipedia.org/wiki/Java_EE" target="_blank" rel="noopener">Java EE</a>全功能栈（full-stack）的<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">应用程序框架</a>，以<a href="https://zh.wikipedia.org/wiki/Apache_License_2.0" target="_blank" rel="noopener">Apache License 2.0</a>开源许可协议的形式发布，也有<a href="https://zh.wikipedia.org/wiki/.NET" target="_blank" rel="noopener">.NET</a>平台上的移植版本。该框架基于 <a href="http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764543857.html" target="_blank" rel="noopener">Expert One-on-One Java EE Design and Development</a>（<a href="https://zh.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0764543857" target="_blank" rel="noopener">ISBN 0-7645-4385-7</a>）一书中的代码，最初由Rod Johnson和Juergen Hoeller等开发。Spring Framework提供了一个简易的开发方式，这种开发方式，将避免那些可能致使底层代码变得繁杂混乱的大量的属性文件和帮助类。</p>
<p>——wiki</p>
</blockquote>
<a id="more"></a>
<p>简单来说</p>
<ul>
<li>Spring是一个开源的Java/JavaEE全功能框架。也就是说可能贯穿整个开发过程，有全套的解决方案。</li>
<li>它是为了简写代码而生的，可以有效的使复杂的代码变得简单，方便了程序开发。</li>
</ul>
<h1 id="Spring有什么优点"><a href="#Spring有什么优点" class="headerlink" title="Spring有什么优点"></a>Spring有什么优点</h1><ul>
<li><strong>方便解耦，简单开发</strong><ul>
<li>Spring就是一个大工厂，可以将所有对象创建和依赖关系的维护交给Spring管理，这样极大降低了耦合性，是开发过程变得简单。</li>
</ul>
</li>
<li><strong>AOP编程的支持</strong><ul>
<li>AOP就是面向切面编程，可以在不修改源代码的情况下仅程序动态统一的添加功能，可以对业务逻辑的各部分进行分离，从而提高的程序的复用性，降低了耦合</li>
</ul>
</li>
<li><strong>声明式事务的支持</strong><ul>
<li>只需要通过配置就可以完成对事务的管理，而无需手动编程</li>
</ul>
</li>
<li><strong>方便程序的测试</strong><ul>
<li>Spring对Junit4支持，可以通过注解方面的测试Spring程序</li>
</ul>
</li>
<li><strong>方便继承各种优秀框架</strong><ul>
<li>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持</li>
</ul>
</li>
<li><strong>降低JavaEE API的使用难度</strong><ul>
<li>Spring对JavaEE开发中非常难用的一些API，都提供了封装，使这些API的使用难度大大降低</li>
</ul>
</li>
<li><strong>高度开放性</strong><ul>
<li>不强制使用框架，可以根据需求使用框架的部分或全部</li>
</ul>
</li>
</ul>
<h1 id="Spring模块"><a href="#Spring模块" class="headerlink" title="Spring模块"></a>Spring模块</h1><p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1554898850651.png" alt="Spring模块"></p>
<ul>
<li>Core Container<ul>
<li>Spring的核心容器，是Spring框架的基础，作用是责管理对象的创建，管理，配置等等的操作。</li>
</ul>
</li>
<li>AOP和Aspects<ul>
<li>面向切面编程的能力，上面优点里已经说明，在做里不做介绍</li>
</ul>
</li>
<li>Instrumentation/Messaging<ul>
<li>提供了为JVM添加代理的功能。几乎不用。</li>
</ul>
</li>
<li>Web<ul>
<li>支持web开发， 包含了4个web组件</li>
</ul>
</li>
<li>Date Access/Integrating<ul>
<li>持久层，简化了数据访问的操作，同时提供了ORM框架的能力，可以对流行的ORM框架进行整合</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-基础入门</title>
    <url>/post/be6e8921/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    建立这个博客也已经三天了，写完第一个建站过程之后，一直不知道该如何下手去写。从知乎上查找“博客 怎么写”、去看别人的博客，刚开始到底怎么写呢？其实到现在我也不是特别明白。</p>
<p>​    既然不明白，那就有什么写什么吧！自己正在学习java，建这个博客本意也是为了能提升自己做好笔记。下定决心就开始写了，先把今天学习的Spring基础写出来，以后在慢慢回顾Java以前的知识点。以下的文章，我是跟着慕课网的课程，以及看书查阅，总结而成的。</p>
<h1 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h1><blockquote>
<p><strong>Spring Framework</strong> 是一个开源的<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noopener">Java</a>／<a href="https://zh.wikipedia.org/wiki/Java_EE" target="_blank" rel="noopener">Java EE</a>全功能栈（full-stack）的<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">应用程序框架</a>，以<a href="https://zh.wikipedia.org/wiki/Apache_License_2.0" target="_blank" rel="noopener">Apache License 2.0</a>开源许可协议的形式发布，也有<a href="https://zh.wikipedia.org/wiki/.NET" target="_blank" rel="noopener">.NET</a>平台上的移植版本。该框架基于 <a href="http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764543857.html" target="_blank" rel="noopener">Expert One-on-One Java EE Design and Development</a>（<a href="https://zh.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0764543857" target="_blank" rel="noopener">ISBN 0-7645-4385-7</a>）一书中的代码，最初由Rod Johnson和Juergen Hoeller等开发。Spring Framework提供了一个简易的开发方式，这种开发方式，将避免那些可能致使底层代码变得繁杂混乱的大量的属性文件和帮助类。</p>
<p>——wiki</p>
</blockquote>
<a id="more"></a>
<p>简单来说</p>
<ul>
<li>Spring是一个开源的Java/JavaEE全功能框架。也就是说可能贯穿整个开发过程，有全套的解决方案。</li>
<li>它是为了简写代码而生的，可以有效的使复杂的代码变得简单，方便了程序开发。</li>
</ul>
<h1 id="Spring有什么优点"><a href="#Spring有什么优点" class="headerlink" title="Spring有什么优点"></a>Spring有什么优点</h1><ul>
<li><strong>方便解耦，简单开发</strong><ul>
<li>Spring就是一个大工厂，可以将所有对象创建和依赖关系的维护交给Spring管理，这样极大降低了耦合性，是开发过程变得简单。</li>
</ul>
</li>
<li><strong>AOP编程的支持</strong><ul>
<li>AOP就是面向切面编程，可以在不修改源代码的情况下仅程序动态统一的添加功能，可以对业务逻辑的各部分进行分离，从而提高的程序的复用性，降低了耦合</li>
</ul>
</li>
<li><strong>声明式事务的支持</strong><ul>
<li>只需要通过配置就可以完成对事务的管理，而无需手动编程</li>
</ul>
</li>
<li><strong>方便程序的测试</strong><ul>
<li>Spring对Junit4支持，可以通过注解方面的测试Spring程序</li>
</ul>
</li>
<li><strong>方便继承各种优秀框架</strong><ul>
<li>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持</li>
</ul>
</li>
<li><strong>降低JavaEE API的使用难度</strong><ul>
<li>Spring对JavaEE开发中非常难用的一些API，都提供了封装，使这些API的使用难度大大降低</li>
</ul>
</li>
<li><strong>高度开放性</strong><ul>
<li>不强制使用框架，可以根据需求使用框架的部分或全部</li>
</ul>
</li>
</ul>
<h1 id="Spring模块"><a href="#Spring模块" class="headerlink" title="Spring模块"></a>Spring模块</h1><p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1554898850651.png" alt="Spring模块"></p>
<ul>
<li>Core Container<ul>
<li>Spring的核心容器，是Spring框架的基础，作用是责管理对象的创建，管理，配置等等的操作。</li>
</ul>
</li>
<li>AOP和Aspects<ul>
<li>面向切面编程的能力，上面优点里已经说明，在做里不做介绍</li>
</ul>
</li>
<li>Instrumentation/Messaging<ul>
<li>提供了为JVM添加代理的功能。几乎不用。</li>
</ul>
</li>
<li>Web<ul>
<li>支持web开发， 包含了4个web组件</li>
</ul>
</li>
<li>Date Access/Integrating<ul>
<li>持久层，简化了数据访问的操作，同时提供了ORM框架的能力，可以对流行的ORM框架进行整合</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>使用MyBatis查看多用户信息出现同一结果</title>
    <url>/post/bd71c1a1/</url>
    <content><![CDATA[<h1 id="错误详情"><a href="#错误详情" class="headerlink" title="错误详情"></a>错误详情</h1><p>利用Mybatis变成时，出现进入多个页面查看不同用户信息返回的总是第一个用户的信息。</p>
<ul>
<li><p>错误详情</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Caused by: org<span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.executor</span><span class="selector-class">.ExecutorException</span>: Executor was closed.</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.executor</span><span class="selector-class">.BaseExecutor</span><span class="selector-class">.createCacheKey</span>(BaseExecutor<span class="selector-class">.java</span>:<span class="number">197</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.executor</span><span class="selector-class">.CachingExecutor</span><span class="selector-class">.createCacheKey</span>(CachingExecutor<span class="selector-class">.java</span>:<span class="number">146</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.executor</span><span class="selector-class">.CachingExecutor</span><span class="selector-class">.query</span>(CachingExecutor<span class="selector-class">.java</span>:<span class="number">82</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.session</span><span class="selector-class">.defaults</span><span class="selector-class">.DefaultSqlSession</span><span class="selector-class">.selectList</span>(DefaultSqlSession<span class="selector-class">.java</span>:<span class="number">148</span>)</span><br><span class="line">	... <span class="number">29</span> more</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h1 id="发现原因"><a href="#发现原因" class="headerlink" title="发现原因"></a>发现原因</h1><ul>
<li><p>原因：sqSession只在UserDao<strong>创建的时候才会创建一次</strong>，一旦销毁没办法再次获得</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1553325494592.png" alt></p>
</li>
</ul>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>解决，只要获取sqlSession放在一个方法里面就好了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sqlSession = SqlSessionFactoryUtils.getSqlSessionFactory().openSession();</span><br><span class="line">    <span class="keyword">return</span> sqlSession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo链接唯一化解决中文标题链接过长问题</title>
    <url>/post/2a09be9d/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前几天跟别人分享自己博客文章的时候，突然发现自己的链接占了手机半个屏幕，才发现原来是使用中文标题命名的问题，而且当你修改文章标题的时候也会使你分享的链接失效。经过google查阅，发现了一个解决办法</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>一个非常简单实用的方法，那就是使用hexo的一个插件<code>abbrlink</code><a id="more"></a></p>
<ul>
<li>首先安装</li>
</ul>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<ul>
<li>然后再你的hexo的<strong>站点配置文件（_config.yml）</strong>中查找并修改修改</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>posts/</code>是可以替换的，标题中的<code>/</code>最好不要超过两个，这样会影响搜索引擎的爬虫抓取你的网站</p>
<ul>
<li>在<strong>站点配置文件（_config.yml）</strong>添加abblink配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"><span class="attr">  alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line"><span class="attr">  rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>现在就完成了，插件会为每个文章自动配置链接，包括已经发布的。</p>
]]></content>
      <categories>
        <category>实用技术</category>
        <category>博客建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>jstl无法正常使用的原因及解决</title>
    <url>/post/1f6db128/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在写jsp页面的时候，利用maven引入了jstl标签，却一直不能用。打开之后的页面是这样的。<a id="more"></a></p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1560252978624.png" alt></p>
<p>百思不得其解，以前没遇到这样的问题啊。</p>
<p>检查了后台代码发现并没有错误，servlet加了log也能正常输出。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在jsp中添加以下语句即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">isELIgnored</span>=<span class="string">"false"</span> %&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>isELIgnored属性用来指定是否忽略。</strong>格式为：</p>
<p><code>＜%@ page isELIgnored＝&quot;true|false&quot;%＞</code></p>
<p>如果设定为真，那么JSP中的表达式被当成字符串处理。Web容器默认isELIgnored＝”false”。</p>
<p>加入后正常显示</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1560254442616.png" alt></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA使用@Autowired出现问题Could not autowire</title>
    <url>/post/fa08712f/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在使用IDEA时莫名奇妙@Autowired注解出现了报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Could not autowire. There is more than one bean of</span><br></pre></td></tr></table></figure>
<h1 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h1><p>经过测试有如下结论</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"departmentDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentDao</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">//@Qualifier(value = "departmentDao")</span></span><br><span class="line"><span class="keyword">private</span> DepartmentDao departmentDao;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>经过测试在运行期间没有问题</strong></li>
<li>当@Repository的默认值和对象一样的时候就会出现错误，如果修改器value和定义的对象名称不一致，就不会报错</li>
<li>如果用@Qualifier设置后就不会出现错误</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后通过以上结论，包括网上的资料得出一下总结</p>
<p><strong>这是一个编译器的错误，并不会影响运行。其错误是IDEA识别成spring生成了两个bean，也就是说IDEA并不能只能的发现运行期间的错误。</strong> </p>
<p>如果想要去解决，那么只需要让IDEA的Inspections将这个错误设置位warning即可。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>非String类型(INT、DATE等)不确定为NULL或空的情况下如何编写SQL查询语句</title>
    <url>/post/a053a60f/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    最近在做一个考勤管理的项目，项目中涉及到了大量的查询语句。如姓名模糊查询、日期查询、时间间隔、部门查询、考勤结果等等，这些查询可以不进行选择（即为此选项不进行条件查询）。</p>
<p>​    以前写过练习语句，这种情况如果是字符串还好说，只需要和“%”拼接进行模糊查询就可以。然而日期为DATA类型，部门编号为INT类型，这种情况就不能使用模糊查询。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>首先选择的方法是进行SQL语句的拼接：<a id="more"></a></p>
<ul>
<li>首先判断是否为空或者NULL</li>
<li>根据条件调用对应SQL语句</li>
<li>拼接到主查询语句</li>
</ul>
<p>然而几条查询还好，单个页面设计十几个查询条件，代码太过于冗余，增加了持久层的大量的无关代码，降低了系统的运行效率。如下进行了大量的if else判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (noteTypeSearch == <span class="number">0</span> &amp;&amp; deptSelect.equals(<span class="string">"全部"</span>) &amp;&amp; dateSearch == <span class="keyword">null</span>) &#123;  <span class="comment">//1</span></span><br><span class="line">           <span class="keyword">return</span> DBHelper.execQuery(sql, Note.class,</span><br><span class="line">                   empSearch</span><br><span class="line">           );</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (noteTypeSearch != <span class="number">0</span> &amp;&amp; deptSelect.equals(<span class="string">"全部"</span>) &amp;&amp; dateSearch == <span class="keyword">null</span>) &#123;  <span class="comment">//2</span></span><br><span class="line">           sql = sql + <span class="string">" AND Att_Note.NoteTypeID = ? "</span>;</span><br><span class="line">           <span class="keyword">return</span> DBHelper.execQuery(sql, Note.class,</span><br><span class="line">                   empSearch,</span><br><span class="line">                   noteTypeSearch</span><br><span class="line">           );</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (noteTypeSearch != <span class="number">0</span> &amp;&amp; !deptSelect.equals(<span class="string">"全部"</span>) &amp;&amp; dateSearch == <span class="keyword">null</span>) &#123;  <span class="comment">//3</span></span><br><span class="line">           sql = sql + <span class="string">" AND Att_Note.NoteTypeID = ? AND d.DepartmentName = ?"</span>;</span><br><span class="line">           <span class="keyword">return</span> DBHelper.execQuery(sql, Note.class,</span><br><span class="line">                   empSearch,</span><br><span class="line">                   noteTypeSearch,</span><br><span class="line">                   deptSelect</span><br><span class="line">           );</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (noteTypeSearch != <span class="number">0</span> &amp;&amp; deptSelect.equals(<span class="string">"全部"</span>) &amp;&amp; dateSearch != <span class="keyword">null</span>) &#123; <span class="comment">//4</span></span><br><span class="line">           sql = sql + <span class="string">" AND Att_Note.NoteTypeID = ? AND ( Att_Note.EndDate &gt; ? AND Att_Note.StartDate &lt; ?)"</span>;</span><br><span class="line">           <span class="keyword">return</span> DBHelper.execQuery(sql, Note.class,</span><br><span class="line">                   empSearch,</span><br><span class="line">                   noteTypeSearch,</span><br><span class="line">                   <span class="keyword">new</span> java.sql.Date(dateSearch.getTime()),</span><br><span class="line">                   <span class="keyword">new</span> java.sql.Date(dateSearch.getTime())</span><br><span class="line">           );</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (noteTypeSearch == <span class="number">0</span> &amp;&amp; !deptSelect.equals(<span class="string">"全部"</span>) &amp;&amp; dateSearch == <span class="keyword">null</span>) &#123; <span class="comment">//5</span></span><br><span class="line">           sql = sql + <span class="string">" AND d.DepartmentName = ?"</span>;</span><br><span class="line">           <span class="keyword">return</span> DBHelper.execQuery(sql, Note.class,</span><br><span class="line">                   empSearch,</span><br><span class="line">                   deptSelect</span><br><span class="line">           );</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (noteTypeSearch == <span class="number">0</span> &amp;&amp; !deptSelect.equals(<span class="string">"全部"</span>) &amp;&amp; dateSearch != <span class="keyword">null</span>) &#123;  <span class="comment">//6</span></span><br><span class="line">           sql = sql + <span class="string">" AND d.DepartmentName = ? AND ( Att_Note.EndDate &gt; ? AND Att_Note.StartDate &lt; ?)"</span>;</span><br><span class="line">           <span class="keyword">return</span> DBHelper.execQuery(sql, Note.class,</span><br><span class="line">                   empSearch,</span><br><span class="line">                   deptSelect,</span><br><span class="line">                   <span class="keyword">new</span> java.sql.Date(dateSearch.getTime()),</span><br><span class="line">                   <span class="keyword">new</span> java.sql.Date(dateSearch.getTime())</span><br><span class="line">           );</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (noteTypeSearch == <span class="number">0</span> &amp;&amp; deptSelect.equals(<span class="string">"全部"</span>) &amp;&amp; dateSearch != <span class="keyword">null</span>) &#123;   <span class="comment">//7</span></span><br><span class="line">           sql = sql + <span class="string">"AND ( Att_Note.EndDate &gt; ? AND Att_Note.StartDate &lt; ?)"</span>;</span><br><span class="line">           <span class="keyword">return</span> DBHelper.execQuery(sql, Note.class,</span><br><span class="line">                   empSearch,</span><br><span class="line">                   <span class="keyword">new</span> java.sql.Date(dateSearch.getTime()),</span><br><span class="line">                   <span class="keyword">new</span> java.sql.Date(dateSearch.getTime())</span><br><span class="line">           );</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           sql = sql + <span class="string">" AND Att_Note.NoteTypeID = ? AND d.DepartmentName = ? AND ( Att_Note.EndDate &gt; ? AND Att_Note.StartDate &lt; ?)"</span>;</span><br><span class="line">           <span class="keyword">return</span> DBHelper.execQuery(sql, Note.class,</span><br><span class="line">                   empSearch,</span><br><span class="line">                   noteTypeSearch,</span><br><span class="line">                   deptSelect,</span><br><span class="line">                   <span class="keyword">new</span> java.sql.Date(dateSearch.getTime()),</span><br><span class="line">                   <span class="keyword">new</span> java.sql.Date(dateSearch.getTime())</span><br><span class="line">           );</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>最终通过朋友和一些资料找到了一个很好的解决办法，利用了SQL语句中的<code>OR</code>，将语句中的参数进行三个判断，只有当参数存在的情况下，才能进行查询，否则只能执行OR其后满足的条件，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"WHERE\n"</span> +</span><br><span class="line">            <span class="string">"        (YEAR(att.AttendanceDate) = ? OR ? IS NULL OR ? = '全部')\n"</span> +</span><br><span class="line">            <span class="string">"    AND (MONTH(att.AttendanceDate) = ? OR ? IS NULL OR ? = '全部')\n"</span> +</span><br><span class="line">            <span class="string">"    AND (DAY(att.AttendanceDate) = ? OR ? IS NULL OR ? = '全部')\n"</span> +</span><br><span class="line">            <span class="string">"GROUP BY emp.CardNumber, emp.EmployeeID;\n"</span>;</span><br></pre></td></tr></table></figure>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>不用进行sql语句的拼接，减少了持久层代码量，是代码更加清晰，性能得到了提醒，将判断交给了数据库，减轻了程序运行的负担</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库CHAR(1)既可以输入数字字母又可以输入汉字问题</title>
    <url>/post/226cfbee/</url>
    <content><![CDATA[<h1 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h1><p>前几日练习项目的时候，因为老师要求，前台的性别男女需要直接存入数据库中。结果，数据库中定义的类型为<code>char(1)</code>，明明是一个字节确实很困惑。</p>
<p>可以看到数据库定义的长度为1</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1562244715624.png" alt></p>
<ul>
<li><p>当输入是”1”的时候</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1562245076326.png" alt></p>
</li>
<li><p>输入性别为”男”，同样也是成功的<a id="more"></a></p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1562245281792.png" alt></p>
</li>
</ul>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>首先，我猜测这里的<code>char(1)</code>中的<code>1</code>并不是字节数，而是有多少个个数。经过我的测试<strong>无论是输入中文、英文、数字、或是字符都是可以的，但是都是只能输入一个。就算是数字，也只能输入一个。</strong></p>
<p>所以尽管一个字符可能是多个字节的，但是仍然可以输入一个。也就是说<code>1</code>代表的是个数，而非字节。</p>
<p>后来在官网的资料上面查到这样的说法</p>
<blockquote>
<p>The <code>CHAR</code> and <code>VARCHAR</code> types are declared with a length that indicates the maximum number of characters you want to store. For example, <code>CHAR(30)</code> can hold up to 30 characters.</p>
<p> <a href="https://dev.mysql.com/doc/refman/5.7/en/char.html" target="_blank" rel="noopener">The CHAR and VARCHAR Types ——mysql</a></p>
</blockquote>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>可以通过添加check约束语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">add</span> <span class="keyword">constraint</span> chk_employee_001 <span class="keyword">check</span>(empsex <span class="keyword">in</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis绑定错误的解决方案 org.apache.ibatis.binding.BindingException</title>
    <url>/post/3076de19/</url>
    <content><![CDATA[<p>最近再进行一个oa系统核心模块开发，使用的SSM框架。在运行的时候，遇到了mybaits无法绑定的问题</p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>问题提示是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.ideashin.oa.dao.DepartmentDao.selectAll</span><br></pre></td></tr></table></figure>
<p>发现问题其实挺弱智的，因为mapper文件和DAO类遇到保持一致，所以我在resources资源文件中命名的时候采用的包的命名方式，这样他还是一个文件夹</p>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1565189556985.png" alt></p>
<p>应该采用的分隔符是<code>/</code>，而不是<code>.</code></p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/1565189627548.png" alt></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域问题access-control-allow-origin</title>
    <url>/post/70d99e61/</url>
    <content><![CDATA[<h1 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h1><p>要了解跨域，首先要知道浏览器的<strong>同源策略</strong>，即页面的协议、域名、端口都要相同。 <strong>跨域就是指从一个域名去请求另一个域名的资源</strong>，跨域时浏览器不能执行其他网站的脚本，它的产生便是没有满足同源策略造成的，它是浏览器的一种保护机制。<strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了</strong></p>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'xxx.xxx.xxx.xx1'</span> from orgin <span class="string">'xxx.xxx.xxx.xx2'</span> has been blocked by CORS policy: Response to preflign request doesn<span class="string">'t pass access control check: No '</span>Access-Control-Allow-Origin<span class="string">' header is presenton the requested resource</span></span><br></pre></td></tr></table></figure>
<ul>
<li>跨域造成的，一个域名去请求另一个域名的资源 <a id="more"></a></li>
<li>浏览器的保护机制，没有收到来自服务器的响应头信息 要解决问题要么消除浏览器的保护机制，要么去解决跨域问题，浏览器的保护机制只能解燃眉之需，不可能让所有人都去接触。因此要在跨域问题着手。错误中提到CORS，那么什么是CORS，如何通过CORS解决跨域问题。</li>
</ul>
<h1 id="跨域资源共享CORS"><a href="#跨域资源共享CORS" class="headerlink" title="跨域资源共享CORS"></a>跨域资源共享CORS</h1><blockquote>
<p><strong>跨域资源共享CORS</strong> 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器<strong>不同的域、协议或端口</strong>请求一个资源时，资源会发起一个<strong>跨域 HTTP 请求</strong> </p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/simple_req.png" alt><br> 来源：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP访问控制（CORS）</a><br> 如上图，即上面问题分析中server需要返回一个Access-Control-Allow-Origin响应头信息 </p>
<h1 id="CORS解决方案"><a href="#CORS解决方案" class="headerlink" title="CORS解决方案"></a>CORS解决方案</h1><p> CORS响应头信息Access-Control-Allow-Origin的作用，即允许服务器声明哪些源通过浏览器有权限访问哪些资源。因此需要在服务器中设置返回请求头 ### 添加响应头 错误是因为没有Access-Control-Allow-Origin响应头信息造成的，只需要在response中添加即可 </p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);<span class="comment">//通常只需要这一个</span></span><br><span class="line">response.addHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET, POST, PUT, DELETE"</span>);</span><br><span class="line">response.addHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type"</span>);</span><br><span class="line">response.addHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"1800"</span>);<span class="comment">//30 min</span></span><br></pre></td></tr></table></figure>
<h2 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h2><p> 也是添加请求头，只是在过滤器中实现了 </p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123; </span><br><span class="line">   HttpServletResponse response = (HttpServletResponse)  res;</span><br><span class="line">   response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);<span class="comment">//通常只需要这一个 </span></span><br><span class="line">   response.addHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET, POST, PUT, DELETE"</span>);</span><br><span class="line">   response.addHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type"</span>);</span><br><span class="line">   response.addHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"1800"</span>);<span class="comment">//30 min chain.doFilter(req, response);&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="注解方式（SpringBoot）"><a href="#注解方式（SpringBoot）" class="headerlink" title="注解方式（SpringBoot）"></a>注解方式（SpringBoot）</h2><p> 只需要在get方法中添加<code>@CrossOrigin(origins = &quot;*&quot;)</code> </p>
<h1 id="其他解决方案"><a href="#其他解决方案" class="headerlink" title="其他解决方案"></a>其他解决方案</h1><ul>
<li>jsonp</li>
<li>postMessage</li>
<li>webSocket</li>
<li>Node中间代理（两次跨域）</li>
<li>nginx反向代理</li>
<li>window.name + iframe</li>
<li>location.hash + iframe</li>
<li>document.domain + iframe<br>具体查看：<a href="https://juejin.im/post/5c23993de51d457b8c1f4ee1#heading-11" target="_blank" rel="noopener">九种跨域方式实现原理</a> </li>
</ul>
<h1 id="附加：-CrossOrigin没有返回响应头的问题"><a href="#附加：-CrossOrigin没有返回响应头的问题" class="headerlink" title="附加：@CrossOrigin没有返回响应头的问题"></a>附加：@CrossOrigin没有返回响应头的问题</h1><p>使用Postman测试发现@CrossOrigin并没有响应头返回，使用response却有，而使用浏览器跨域访问都会返回请求头。初步猜测是注解的实现，加入了跨域请求的验证。<br>加入注解后spring在记录mapper映射时会记录对应跨域请求映射，获取handler时会判断这个请求是否是一个跨域请求，如果是，则会返回一个可以处理跨域的handler </p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AbstractHandlerMapping#getHandlerHandler</span></span><br><span class="line"></span><br><span class="line"> ExecutionChain executionChain = getHandlerExecutionChain(handler, request);</span><br><span class="line"> <span class="comment">//如果是一个跨域请求</span></span><br><span class="line"> <span class="keyword">if</span> (CorsUtils.isCorsRequest(request)) &#123;      </span><br><span class="line">    <span class="comment">//拿到跨域的全局配置</span></span><br><span class="line">     CorsConfiguration globalConfig =           <span class="keyword">this</span>.globalCorsConfigSource.getCorsConfiguration(request);</span><br><span class="line"> <span class="comment">//拿到hander的跨域配置</span></span><br><span class="line">    CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);</span><br><span class="line">    CorsConfiguration config = (globalConfig != <span class="keyword">null</span> ? globalConfig.combine(handlerConfig) : handlerConfig);           </span><br><span class="line">     <span class="comment">//处理跨域（即往响应头添加Access-Control-Allow-Origin信息等），并返回对应的handler对象</span></span><br><span class="line">    executionChain = getCorsHandlerExecutionChain(request, executionChain, config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 判断是否是跨域请求<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCorsRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判定请求头是否有Origin 属性即可</span></span><br><span class="line">    <span class="keyword">return</span> (request.getHeader(HttpHeaders.ORIGIN) != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 参考来源：<a href="https://my.oschina.net/u/3574106/blog/3022246" target="_blank" rel="noopener">Spring @CrossOrigin 注解原理 </a>   </p>
]]></content>
      <categories>
        <category>Java</category>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>集合删除元素的坑-for循环、迭代器、foreach我该用哪个？</title>
    <url>/post/4d006963/</url>
    <content><![CDATA[<p><strong>注意：如果你要对集合在遍历时进行删除操作，请使用迭代器的remove方法，而非集合的remove。</strong>具体缘由，我们下面进行分析。</p>
<h1 id="集合常用的遍历方法"><a href="#集合常用的遍历方法" class="headerlink" title="集合常用的遍历方法"></a>集合常用的遍历方法</h1><p>我们通常对集合进行遍历的方法有哪些呢？</p>
<p>现在我们有一个<code>List&lt;String&gt; list = new ArrayList&lt;&gt;();</code>，为它添加4个String类型的数字：1，2，3，4。</p>
<ol>
<li>for循环</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Iterator迭代器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>foreach增强for循环<a id="more"></a></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上所见循环起来还是挺好用的，但是当我们要删除某个元素的时候呢？</p>
<h1 id="遍历集合删除某个元素"><a href="#遍历集合删除某个元素" class="headerlink" title="遍历集合删除某个元素"></a>遍历集合删除某个元素</h1><p>为了保险起见，我们把4个数字都测试一遍</p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String num = ”<span class="number">1</span>“;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">       System.out.println(list.get(i));</span><br><span class="line">       <span class="keyword">if</span>(num.equals(list.get(i)))&#123;</span><br><span class="line">           list.remove(i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong>完美通过</p>
<h2 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h2><h3 id="集合的remove"><a href="#集合的remove" class="headerlink" title="集合的remove"></a>集合的remove</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String num = ”<span class="number">1</span>“;   </span><br><span class="line">Iterator iterator = list.iterator();</span><br><span class="line">   <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">       String listNum = iterator.next();  </span><br><span class="line">       System.out.println(listNum);</span><br><span class="line">       <span class="keyword">if</span>(num.equals(listNum))&#123;</span><br><span class="line">           list.remove(listNum);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong>失败，下面时报错信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span><br><span class="line">	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)</span><br><span class="line">	at java.util.ArrayList$Itr.next(ArrayList.java:859)</span><br><span class="line">	at com.ideashin.shintest.foreach.ForeachRemove.main(ForeachRemove.java:49)</span><br></pre></td></tr></table></figure>
<p>让我们先记住这个错误<strong><code>ConcurrentModificationException</code></strong>，一会再来分析他的原因。</p>
<h3 id="迭代器的remove"><a href="#迭代器的remove" class="headerlink" title="迭代器的remove"></a>迭代器的remove</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String num = ”<span class="number">1</span>“;   </span><br><span class="line">Iterator iterator = list.iterator();</span><br><span class="line">   <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">       String listNum = iterator.next();  </span><br><span class="line">       System.out.println(listNum);</span><br><span class="line">       <span class="keyword">if</span>(num.equals(listNum))&#123;</span><br><span class="line">           iterator.remove(listNum);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong>完美通过</p>
<h2 id="foreach增强for循环"><a href="#foreach增强for循环" class="headerlink" title="foreach增强for循环"></a>foreach增强for循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String num = ”<span class="number">1</span>“;       </span><br><span class="line"><span class="keyword">for</span> (String listNum : list) &#123;</span><br><span class="line">       System.out.println(listNum);</span><br><span class="line">       <span class="keyword">if</span>(num.equals(listNum))&#123;</span><br><span class="line">           list.remove(listNum);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><strong>测试结果：</strong>失败，报错信息与迭代器如出一辙。</p>
<h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><h2 id="使用迭代器遍历删除"><a href="#使用迭代器遍历删除" class="headerlink" title="使用迭代器遍历删除"></a>使用迭代器遍历删除</h2><p>当我们使用迭代器遍历，但是使用集合的romove方法删除的时候会出现<strong><code>ConcurrentModificationException</code>并发修改异常</strong>，也就是说在并发状态下我们对集合进行了修改，导致出现错误。我们查看迭代器的源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">      <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">      <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">      Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> cursor != size;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          checkForComodification();</span><br><span class="line">          <span class="keyword">int</span> i = cursor;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">          Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">          cursor = i + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">          checkForComodification();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">              cursor = lastRet;</span><br><span class="line">              lastRet = -<span class="number">1</span>;</span><br><span class="line">              expectedModCount = modCount;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">          Objects.requireNonNull(consumer);</span><br><span class="line">          <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">          <span class="keyword">int</span> i = cursor;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">              consumer.accept((E) elementData[i++]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">          cursor = i;</span><br><span class="line">          lastRet = i - <span class="number">1</span>;</span><br><span class="line">          checkForComodification();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到<code>ConcurrentModificationException</code>在<code>next()</code>方法中<code>checkForComodification();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>这里抛出了异常，<strong><code>modCount != expectedModCount</code></strong>，我们来看一下这两个实在那里初始化的。</p>
<ul>
<li>当对迭代器进行初始化时将<code>int expectedModCount = modCount</code></li>
<li>而当集合进行操作的时候 modCount就会发生变化</li>
</ul>
<p>有如下解释</p>
<blockquote>
<p>Iterator是工作在一个独立的线程中，并且拥有一个 mutex 锁。 Iterator被创建之后会建立一个指向原来对象的单链索引表，当原来的对象数量发生变化时，这个索引表的内容不会同步改变，所以当索引指针往后移动的时候就找不到要迭代的对象，所以按照 fail-fast 原则 Iterator 会马上抛出java.util.ConcurrentModificationException异常。</p>
</blockquote>
<blockquote>
<p>fail-fast 机制 ：多个线程对 fail-fast 集合进行修改的时，可能会抛出ConcurrentModificationException，单线程下也会出现这种情况，上面已经提到过。</p>
</blockquote>
<p><strong>因此在对方法进行删除时要使用迭代器的remove。</strong></p>
<h2 id="使用foreach遍历删除"><a href="#使用foreach遍历删除" class="headerlink" title="使用foreach遍历删除"></a>使用foreach遍历删除</h2><p>为甚么foreach也会出现这种问题呢，我们将foreach的代码进行反编译</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String num = <span class="string">"1"</span>;</span><br><span class="line"> Iterator var3 = list.iterator();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(var3.hasNext()) &#123;</span><br><span class="line">     String listNum = (String)var3.next();</span><br><span class="line">     System.out.println(listNum);</span><br><span class="line">     <span class="keyword">if</span> (num.equals(listNum)) &#123;</span><br><span class="line">         list.remove(listNum);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到<strong>foreach实际上时利用迭代器实现的</strong></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式-从那只不会飞的鸭子讲起</title>
    <url>/post/86a3b5db/</url>
    <content><![CDATA[<h1 id="在编程中遇到了问题？"><a href="#在编程中遇到了问题？" class="headerlink" title="在编程中遇到了问题？"></a>在编程中遇到了问题？</h1><p><strong>已经有人解决了你的问题。</strong>对于编程人员来说，代码的复用很重要重要，可以减少开发的难度，提高效率。然而代码的复用只是针对于小部分的功能，不同的软件项目的功能千差万别，很多的问题是解决不了的，因此经验复用更加的重要。设计模式就是为此而生。</p>
<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="OO技术"><a href="#OO技术" class="headerlink" title="OO技术"></a>OO技术</h2><ul>
<li>继承</li>
<li>封装</li>
<li>多态<a id="more"></a></li>
</ul>
<h2 id="OO原则"><a href="#OO原则" class="headerlink" title="OO原则"></a>OO原则</h2><ul>
<li><strong>封装变化</strong>找出应用中的可能变化的地方封装起来，与不需要变化的地方区别分开，相互之间不干扰，也就是说冷热分离。</li>
<li><strong>针对接口编程，而非实现</strong>。它的真正意思是针对于超类型编程，利用多态的原理，并不仅仅是利用interface编程。</li>
<li><strong>多用组合，少用继承</strong>。这样能使程序更加的灵活，维护、扩展更加的方便。</li>
</ul>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>定义了一个<strong>算法簇</strong>，分别封装起来，让他们之间可以互相的替换，此模式让算法的变化独立于使用算法的客户。</p>
<h1 id="从那只不会飞的鸭子讲起"><a href="#从那只不会飞的鸭子讲起" class="headerlink" title="从那只不会飞的鸭子讲起"></a>从那只不会飞的鸭子讲起</h1><h2 id="老鸭子和它的小鸭子们"><a href="#老鸭子和它的小鸭子们" class="headerlink" title="老鸭子和它的小鸭子们"></a>老鸭子和它的小鸭子们</h2><p>有一个老鸭子（超类），他可以游泳，可以呱呱叫。他的小鸭子们（子类）都继承子老鸭子，并且追随潮流把自己染成了绿头、红头。。</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/20200510182141.png" alt></p>
<h2 id="想飞的小鸭子"><a href="#想飞的小鸭子" class="headerlink" title="想飞的小鸭子"></a>想飞的小鸭子</h2><p>小鸭子想飞，但是自己又不会，只能老鸭子来教一教，以身示范学习了飞行（添加<code>fly()</code>方法）。可是万万没想，有一只小鸭子根本不能有用，他是一只橡皮鸭子。</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/20200510191129.png" alt></p>
<p>这可急坏了老鸭子，看来不能什么东西都遗传给小鸭子们（继承），这可怎么办呢？</p>
<p><strong>封装变化</strong>：老鸭子想了个办法，把自己会飞的本领从自己身上分开，哪个小鸭子要想学就再教给他（接口实现）。</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/20200510193701.png" alt></p>
<p>那么这样真的好吗？</p>
<p>小鸭子们千奇百怪，有的想学飞行，有的想学呱呱叫，有的都想学，有的又什么都不想学。这可难为死老鸭子了，这么多小鸭子，万一忘记了教哪一个，它肯定要闹脾气。而且小鸭子们刚开始不想学习飞行，但是以后想学习，还要重新给小鸭子们构造一下。</p>
<h2 id="让问题归零"><a href="#让问题归零" class="headerlink" title="让问题归零"></a>让问题归零</h2><p>老鸭子干脆不教了，就告诉那群小鸭子们，”我们可以飞行、可以叫，想要自己去学，我只是告诉你们“。</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/20200510194446.png" alt></p>
<p><strong>接着老鸭子将具体的本领编成秘籍，都分类放在一个个的本领簇里面（算法簇），看来老鸭子还是不太放心小鸭子，不过这样省事多了，不用自己亲自教了。</strong></p>
<p><img src="/post/86a3b5db/2020-05-10-设计模式入门：从策略模式看鸭子的前生今世/image-20200510193854762.png" alt="image-20200510193854762"></p>
<p>自从这样以后老鸭子就轻松多了什么事情都不用操心了，活得好生快活。</p>
<h2 id="这老鸭子到底什么诀窍？"><a href="#这老鸭子到底什么诀窍？" class="headerlink" title="这老鸭子到底什么诀窍？"></a>这老鸭子到底什么诀窍？</h2><p>这老鸭子是怎么教的呢？</p>
<p><img src="https://raw.githubusercontent.com/IDEAShin/blog-image-host/master/img/20200510194700.png" alt></p>
<p>看到这里就明白了，原来老鸭子再自己的类里面放了两个行为的声明，并且为它们设置get方法，然后小鸭子就可以动态的去添加这些行为了，即使小鸭子刚开始不想学飞行，以后长大了也可以再在重新去学习。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Head First 设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
