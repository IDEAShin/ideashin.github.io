<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring基础入门]]></title>
    <url>%2F2019%2F04%2F10%2FSpring%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[0.前言​ 建立这个博客也已经三天了，写完第一个建站过程之后，一直不知道该如何下手去写。从知乎上查找“博客 怎么写”、去看别人的博客，刚开始到底怎么写呢？其实到现在我也不是特别明白。 ​ 既然不明白，那就有什么写什么吧！自己正在学习java，建这个博客本意也是为了能提升自己做好笔记。下定决心就开始写了，先把今天学习的Spring基础写出来，以后在慢慢回顾Java以前的知识点。以下的文章，我是跟着慕课网的课程，以及看书查阅，总结而成的。 1. Spring概述1.1 Spring是什么 Spring Framework 是一个开源的Java／Java EE全功能栈（full-stack）的应用程序框架，以Apache License 2.0开源许可协议的形式发布，也有.NET平台上的移植版本。该框架基于 Expert One-on-One Java EE Design and Development（ISBN 0-7645-4385-7）一书中的代码，最初由Rod Johnson和Juergen Hoeller等开发。Spring Framework提供了一个简易的开发方式，这种开发方式，将避免那些可能致使底层代码变得繁杂混乱的大量的属性文件和帮助类。 ——Google 简单来说 Spring是一个开源的Java/JavaEE全功能框架。也就是说可能贯穿整个开发过程，有全套的解决方案。 它是为了简写代码而生的，可以有效的使复杂的代码变得简单，方便了程序开发。 1.2 Spring有什么优点 方便解耦，简单开发 Spring就是一个大工厂，可以将所有对象创建和依赖关系的维护交给Spring管理，这样极大降低了耦合性，是开发过程变得简单。 AOP编程的支持 AOP就是面向切面编程，可以在不修改源代码的情况下仅程序动态统一的添加功能，可以对业务逻辑的各部分进行分离，从而提高的程序的复用性，降低了耦合 声明式事务的支持 只需要通过配置就可以完成对事务的管理，而无需手动编程 方便程序的测试 Spring对Junit4支持，可以通过注解方面的测试Spring程序 方便继承各种优秀框架 Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持 降低JavaEE API的使用难度 Spring对JavaEE开发中非常难用的一些API，都提供了封装，使这些API的使用难度大大降低 高度开放性 不强制使用框架，可以根据需求使用框架的部分或全部 ###]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人博客并部署到Vps服务器]]></title>
    <url>%2F2019%2F04%2F07%2FHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Vps%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[0. 前言看到别人都在写blog，拥有自己的小站，实在羡慕不已。虽然自己也在做笔记，但是总感觉自己偷偷放着不那么舒服，不如放在网上和大家一起交流共勉。因此我决心要有自己的blog。最后终于完成了自己第一个的网站，也是自己第一个blog，也是有了自己的第一个域名ideashin.com。 建站的过程并不怎么顺利，本来Hexo+GitHub是绝配，但是我本身就有一个限制（开小飞机）的vps，一直放着也是浪费，因此决心用vps部署一个Hexo的博客。因为以前并没有接触过，所以查看了很多资料才完成的。以下就是我建站的过程，遇到的问题我都放在最后面了，如果有幸能被看到的话希望能有所帮助。 在此写下第一篇博客，也是自己的一个开端，希望对自己有能所提升。也方便自己以后查阅，也希望能有幸帮到他人。 1. 本地安装1.1 环境配置安装hexo需要在本机安装Git以及Node.js 1.1.1 Git 从官网下载安装好后https://git-scm.com/ 使用 git -version’可以查看安装的版本 配置用户信息，设置用户名以及邮箱 1234$ git config --global user.name "用户名"$ git config --global user.email "邮箱地址"#查看是否成功$ git config --list 重要 获取key，后面配置SSH要用到 在Git Bash中执行 1234#创建公钥$ ssh-keygen -t rsa -C "邮箱地址"#然后获取复制公钥备用$ cat ~/.ssh/id_rsa.pub 1.1.2 Node.js 官网下载安装https://nodejs.org 输入node -version查看安装版本 1.2 Hexo配置具体可以参照官方文档，有中文版就介绍也很详细，这里只简单配置 https://hexo.io/zh-cn/docs/ 1.2.1 安装参照官方文档，使用下列代码安装 1$ npm install -g hexo-cli 1.2.2 建站在你想存放hexo的地方新建一个文件夹，如Hexo，然后在文件夹内右键启动git的git bash，执行如下代码 12$ hexo init$ npm install 注意： 不要用git init，这样会把整个hexo文件都同步到服务器，应该是hexo init 1.2.3 测试1$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo server 执行后可以输入网址本地查看http://localhost:4000 2. Server操作2.1 确保您的系统和apt包首先，通过运行以下命令确保您的系统和apt包列表完全更新： 12$ apt-get update -y$ apt-get upgrade -y 2.2 安装git、sudo、nginx123456$ apt install git#debian默认无sodu$ apt-get install sudo$ apt-get install nginx 检查版本确保安装 123$ git --version$ nginx -V 2.3 配置nginx123456#切换目录$ cd /etc/nginx/sites-available#备份默认配置$ cp default default.bak #修改配置$ vim default 123456789#检查是否有错误$ nginx -t #保存退出后，启动$ nginx：systemctl start nginx#设置开机自动启动$ systemctl enable nginx#查看运行状态$ systemctl status nginx#显示running表示成功运行 2.4 创建git用户2.4.1 创建1$ adduser git 2.4.2 赋予sudo权限12$ chmod 740 /etc/sudoers$ vim /etc/sudoers 然后修改在root下面添加 1git ALL=(ALL) ALL 改回权限 1$ chmod 400 /etc/sudoers 2.5 配置SSH2.5.1 切换git用户，并到git用户目录12345#切换到git用户$ su git#转到git用户目录$ cd /home/git 2.5.2 配置ssh1234567891011# 创建.ssh文件夹$ mkdir ~/.ssh#输入可查看是否创建$ ls -a# 创建authorized_keys文件并编辑$ vim ~/.ssh/authorized_keys# 如果你还没有生成公钥，那么首先在本地电脑中执行 cat ~/.ssh/id_rsa.pub | pbcopy生成公钥# 再将公钥复制粘贴到authorized_keys# 保存关闭authorized_keys后，修改相应权限$ chmod 600 ~/.ssh/authorized_keys$ chmod 700 ~/.ssh 然后输入测试是否可以登录（免密？） 1$ ssh -v git@68.168.141.184 默认22端口，不是则需要在后面加上-p 端口号 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!是以前配置过主机，需要进行删除 1$ vi ~/.ssh/known_hosts 2.6 创建git裸库 创建裸库 1234# 回到git目录$ cd /home/git# 使用git用户创建git裸仓库，以blog.git为例$ git init --bare blog.git 根据前面配置的nginx中的根目录 1234#切换目录$ cd /var/www/ #创建网站目录，以blog为例$ mkdir blog 2.7 检查用户权限检查一下之前的blog.git、.ssh、blog目录的用户组权限是否都为git:git 12$ ls -l /var/www/$ ls -l /homw/git/ 如果不是则 12$ sudo chown git:git -R /var/www/blog$ sudo chown git:git -R /home/git/blog.git 2.8 使用git-hooks同步网站根目录使用一个钩子文件：post-receive，每当git仓库接收到内容的时候，就会自动调用这个钩子，把内容同步到网站根目录。 git用户下执行 1234#切换到hooks目录下$ cd /home/git/blog.git/hooks#创建文件$ vim post-receive 添加如下 12345678#!/bin/bashGIT_REPO=/home/git/blog.gitTMP_GIT_CLONE=/home/git/tmp/hexo_tmp #在这个文件夹下随便创建文件，不然出错PUBLIC_WWW=/var/www/blog #在这个文件夹下随便创建文件，不然出错rm -rf $&#123;TMP_GIT_CLONE&#125;git clone $GIT_REPO $TMP_GIT_CLONErm -rf $&#123;PUBLIC_WWW&#125;/*cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125; 保存后，执行以下赋予权限 1$ chmod +x post-receive 2.9 关闭git用户的shell权限12#执行$ vim /etc/paswd 将最后一行 123git:x:1000:1000::/home/git:/bin/bash#改为git:x:1000:1000::/home/git:/usr/bin/git-shell 3. 本地操作3.1 配置本地Hexo的_config.yml1234deploy: type: git repo: git@你的服务器IP:/home/git/blog.git branch: master 3.2 同步到服务器12#清理、生成、部署$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 到现在已经全部完成了，可以自己进行一些配置进一步完善 4. 问题总结服务器使用sodu命令时无法使用 原因 debian默认sodu 解决 执行如下 1$ apt-get install sudo systemctl: command not found 原因 系统版本旧就会没有systemctl命令 解决 使用service命令 1$ sudo service &#123;servicename&#125; &#123;stop|start|restart&#125; fatal: Not a git repository (or any of the parent directories): .git 原因 提示说没有.git这样一个目录 解决 git init就好了 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 原因 本机git连接过服务器地址，但是服务器重装了，需要进行删除 解决 输入以下命令，删除文件中要连接的服务器 1$ vi /Users/wangdong/.ssh/known_hosts repository ‘xxxxxxxxx’does not exist 原因 如果要删除这个目录下的文件，这个目录下必须有文件，不然删除就是无意义的 解决 提前在该目录下新建一些文件 在clone一些git项目的时候，有些可能时间太久远，下载失败 解决 将git clone http:改为git clone git:]]></content>
      <categories>
        <category>实用技术</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
</search>
